#!/usr/bin/env python
'''
2018 Summer
Originally generated by Uwe Kraemer <uwe.kraemer@desy.de>
update by Mengqing <mengqing.wu@desy.de>
For making kpix channel disable mapping, 
based on calibration /and pedestal files.
-- Copy right reserved for DESY
'''

import numpy as np
import os 
import ROOT
import argparse
import argcomplete
import sys


calib_list= []

class MyParser(argparse.ArgumentParser):
    def error(self, message):
        sys.stderr.write('error: %s\n' % message)
        self.print_help()
        sys.exit(2)

def loopdir(keys):  # loop through all subdirectories of the root file and add all plots+histograms that contain the same string as given by the name, channel and bucket arguments to the global list of all chosen histograms hist_list
	for key_object in keys:
		if ('TDirectory' in key_object.GetClassName()):
			loopdir(key_object.ReadObj().GetListOfKeys())
		else:
			if (('calib' in key_object.GetName()) and ('_k'+str(args.kpix) in key_object.GetName())):
				calib_list.append(key_object)
				##print key_object.GetName()
				
				

######### Parser #########
parser = MyParser()
#parser = argparse.ArgumentParser()
parser.add_argument('file_in', nargs='+', help='name of the input files')
parser.add_argument('-k', '--kpix', dest='kpix', help='kpix to be chosen from the file')
parser.add_argument('-s', '--sensor', dest='sensor', help='name of the sensor')
#parser.add_argument('-o', '--outfile', dest='outfile', help='name of the output file')

args = parser.parse_args()
######### Parser #########
if len(sys.argv) < 2:
	print parser.print_help()
	sys.exit(1)

root_file_list = []
for root_file in args.file_in:
	root_file_list.append(ROOT.TFile(root_file))


for x in root_file_list:
	key_root = x.GetListOfKeys()
	loopdir(key_root)

fheader = open("data/"+args.sensor+".txt", 'w') # xxx.h
fheader.write("Channel_Number 		Calibration_Slope\n")


for calib_obj in calib_list:
	calib = calib_obj.ReadObj()
	calib_slope = calib.GetFunction("pol1").GetParameter(1);
	calib_y0 = calib.GetFunction("pol1").GetParameter(0);
	print calib_slope
	channel_number = calib_obj.GetName()[calib_obj.GetName().find('_c')+2:calib_obj.GetName().find('_b')]
	print channel_number
	fheader.write(channel_number+"		"+str(calib_slope)+"\n")	

fheader.write("EOF")
fheader.close()


